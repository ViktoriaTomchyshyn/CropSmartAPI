// <auto-generated />
using System;
using CropSmartAPI.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CropSmartAPI.DAL.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240430113811_CropFieldsNullable")]
    partial class CropFieldsNullable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.25");

            modelBuilder.Entity("CropSmartAPI.DAL.Entities.Crop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Fertility")
                        .HasColumnType("REAL");

                    b.Property<int>("FieldId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("HarverstDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SowingDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.ToTable("Crops");
                });

            modelBuilder.Entity("CropSmartAPI.DAL.Entities.Fertilizer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CropId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CropId");

                    b.ToTable("Fertilizers");
                });

            modelBuilder.Entity("CropSmartAPI.DAL.Entities.Field", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Area")
                        .HasColumnType("REAL");

                    b.Property<string>("CadastralNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("CoordinateX")
                        .HasColumnType("REAL");

                    b.Property<double>("CoordinateY")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PropertyRight")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SoilType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Userid")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Userid");

                    b.ToTable("Fields");
                });

            modelBuilder.Entity("CropSmartAPI.DAL.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CropSmartAPI.DAL.Entities.Crop", b =>
                {
                    b.HasOne("CropSmartAPI.DAL.Entities.Field", "Field")
                        .WithMany("Crops")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");
                });

            modelBuilder.Entity("CropSmartAPI.DAL.Entities.Fertilizer", b =>
                {
                    b.HasOne("CropSmartAPI.DAL.Entities.Crop", "Crop")
                        .WithMany("Fertilizers")
                        .HasForeignKey("CropId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crop");
                });

            modelBuilder.Entity("CropSmartAPI.DAL.Entities.Field", b =>
                {
                    b.HasOne("CropSmartAPI.DAL.Entities.User", "User")
                        .WithMany("Fields")
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CropSmartAPI.DAL.Entities.Crop", b =>
                {
                    b.Navigation("Fertilizers");
                });

            modelBuilder.Entity("CropSmartAPI.DAL.Entities.Field", b =>
                {
                    b.Navigation("Crops");
                });

            modelBuilder.Entity("CropSmartAPI.DAL.Entities.User", b =>
                {
                    b.Navigation("Fields");
                });
#pragma warning restore 612, 618
        }
    }
}
